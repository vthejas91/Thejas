
import java.util.ArrayDeque;
import java.util.Queue;


public class BinaryTree {

   private Node root;
   Queue queue = new ArrayDeque();
  public void BtInsert(int val)
   {
           
       Node temp = new Node();
       temp.createNode(val);
       
       int flag=0;
       if(root==null)
       {   
              root = temp; 
              queue.add(root);
       }
       else
       {
           
           while(flag==0)
           {
            Node x = (Node)queue.element();
           if(x.left==null)
            {
               x.left = temp;
              queue.add(x.left);  
              flag = 1;
             }
           else if(x.right == null)
           {
               x.right = temp;
               queue.add(x.right);
               flag=1;
           }
           else
           {
               queue.remove();
           }
                         
           }
                      
       }
             
   }
  
    
    public void inorder(Node focusNode)
   {
       
       // left,root , right
       if(focusNode!=null)
       { // System.out.println("in");
           inorder(focusNode.left);
     System.out.print(focusNode.value+"  ");
     inorder(focusNode.right);
      
       }
      
   }
    public void mirrorTree(Node t)
    {
        if(t!=null)
        {
            mirrorTree(t.left);
            Node x = t.left;
            t.left = t.right;
            t.right = x;
            
            mirrorTree(t.right);
            
        }
        
    }
    public static void main(String[] args) {
        // TODO code application logic here
        BinaryTree tree = new BinaryTree();
       
      // Node root = new Node();
        tree.BtInsert(9);
        tree.BtInsert(10);
        tree.BtInsert(2);
        tree.BtInsert(3);
        tree.BtInsert(11);
        tree.BtInsert(7)  ;
        tree.BtInsert(8)  ;
        
        
        tree.inorder(tree.root);
        
        tree.mirrorTree(tree.root);
        System.out.println("");
        tree.inorder(tree.root);
     // tree.inorder(tree.root);
     
     // tree.inorder(tree.root);
       
        
    }
    
}
