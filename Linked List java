public class Node {
    int value;
    Node next;
    
    public void CreateNodeNode(int val)
    {
        value = val;
        next = null ;
    }
       
  
    public void insertNode(int val)
    {
     
        Node n = this ;
        Node end = new Node();
        end.CreateNodeNode(val);
        if(n.value==0) 
        {
            n.value=end.value;
            n.next = end.next;
        }
        else
        {
         while(n.next != null)
        {
            n = n.next;
        }
          n.next = end;
        }
        
        
        
        
    }
    public Node DeleteNode(int val)
    {
        Node temp = this;
        Node n = this;
        if(n.value == val)
        {
            n = n.next;
            return n;
        }
        else
        {
            while(n.next.value != val)
            {
                n = n.next;
            }
            n.next = n.next.next;
            return temp;
        }
        
        
    }
    public Node del_m(int n)
    {
        Node d = this;
        Node t = this;
        for(int i=0;i<n;i++)
        {
            t=t.next;
            
        }
        Node temp =t.next;
        while(t.next!=null)
        {
            t.value = t.next.value;
            t.next = t.next.next;
            System.out.println(t.value+"t value");
            t=temp;
           
            System.out.println(temp.value+"temp value");
             temp = temp.next;
             
        }
              t=null;
        return d;
  
        
        
    }
    public void disp_n(int n)
    {
        Node t = this;
        if(t == null)
        {
            System.out.println("List is empty");
        }
        else
        {
            Node last = t;
            for(int i=0;i<n;i++)
            {
                last = last.next;
                if(last==null)
                    break;
            }
            if(last == null)
            {
                System.out.println("Elements not available");
            }
            else
            {
                while(last!=null)
                {
                    last = last.next;
                    t=t.next;
                }
                System.out.println(t.value);
            }
            
            
        }
    }
    
    public Node Add2Nos(Node a,Node b)
    {
        Node c = this;
        int carry=0;
        int val;
        while(a!=null)
        {
            val = a.value + b.value+carry;
            if(val>9)
            {
                carry = 1;
                val = val%10;            
                c.insertNode(val);
            }
            else
            {
                carry = 0;
                c.insertNode(val);
            }
            
            a=a.next;
            b=b.next;
        }
        
        
               
        return c;
    }
            
    public void display()
    {
        Node n = this;
        while(n != null)
        {
            System.out.println(n.value);
            n= n.next;
        }
       // System.out.println("Display");
        
    }
    public void bubsort( )
    {
        
        Node d =this; 
        Node t = this;
        Node m = t;   
         Node n = m.next;
        while(d!=null)
        {
            
            while(n!=null)
            {
                if(m.value>n.value)
                {
                    int  temp = m.value;
                    m.value = n.value;
                    n.value = temp;
                }
                
                m = m.next;
                n = n.next;
            }
             m = t;   
             n = m.next;
           d = d.next;
        }
        
        
        
        
    }
    
    public void mergesplit(int p,int q)
    {
        System.out.println("entered mergesplit");
        if(p>q)
            return;
        else
        {
           // System.out.println("entered else mergesplit");
            int r = (p+q)/2;
            mergesplit(p,r-1);
            mergesplit(r,q-1);
            merge(p,r-1,q);
            
        }
        
        
    }
    
    public void merge(int a,int b,int c)
    {
        Node t = this;
        int n = a;
        while(n>0)
        {
            t = t.next;
            n--;
        }
        Node t1 = t;
        
        int d1 = b-a+1;
        int d2 = c-b;
        Node x = new Node();
        Node y = new Node();
        while(d1>0)
        {
            x.insertNode(t.value);
            t = t.next;
            d1--;
        }
        while(d2>0)
        {
            y.insertNode(t.value);
            t = t.next;
            d2--;
        }
        
        int p = c - a;
        while(p>0)
        {
            if(x==null)
            {
                t1.value = y.value;
                y = y.next;
                t1 = t1.next;
            }
            else if(y == null)
            {
                t1.value = x.value;
                x = x.next;
                t1 = t1.next;
            }
            else
            {
                if(x.value<=y.value)
                {
                    t1.value = x.value;
                    x = x.next;
                    t1 = t1.next;
                }
                else
                {
                    t1.value = y.value;
                    y = y.next;
                    t1 = t1.next;
                }
            }
            
            
            
            p--;
        }
        
        
        
    }
    
    public void mergesort()
    {
        Node t = this;
        int count=0;
        while(t!=null)
        {
            count++;
            t=t.next;
        }
        int p = 0;
        int q = count ;
        int r = count/2;
        mergesplit(p,q);
        
        
    }
    
    public Node merge2lists(Node a, Node b)
    {
        Node temp = new Node();
        while(a!=null || b!=null)
        {
            if(a==null)
            {
                temp.insertNode(b.value);
                b=b.next;
            }
            else if(b==null)
            {
                temp.insertNode(a.value);
                a = a.next;
            }
            else
            {
                if(a.value<=b.value)
                {
                    temp.insertNode(a.value);
                    a = a.next;
                }
                else
                {
                    temp.insertNode(b.value);
                b=b.next;
                }
            }
            
        }
        
        return temp;
    }
    
    public Node Rotate(int k)
    {
        Node t = this;
        Node d = this;
        Node start = this;
        
        while(t.next!=null)
        {
            t = t.next;
        }
        
        while(k-1>0)
        {
            d = d.next;            
            
            k--;
        }
        Node n = d.next;
        d.next = null;
        t.next = start;
        
        return n;
        
    }
    
    public void swapAlt()
    {
        Node t = this ;
        while(t!=null)
        {
            if(t.next!=null)
            {
                int temp ;
                temp =  t.value;
                t.value = t.next.value;
                t.next.value = temp;
                
                t = t.next.next;
            }          
            else
            {
                t= t.next;
            }
            
        }
        
        
    }
    
    public void DelAlt()
    {
        Node t = this ;
        while(t!=null)
        {
            if(t.next!=null)
            {
                                
                t.next = t.next.next;
                t = t.next;
            }          
            else
            {
                t= t.next;
            }
            
        }
        
        
        
    }
        
    public static void main(String[] args) {
        // TODO code application logic here
        Node a = new Node();
        a.insertNode(10);
        a.insertNode(20);
        a.insertNode(30);
        a.insertNode(40);
        a.insertNode(50);
        a.insertNode(60);
        a.insertNode(70);
      
        //a.swapAlt();
         a.DelAlt();
//        a = a.Rotate(0);
       // a.mergesort();
        
        a.display();
        //a.display();
        Node b = new Node();
        b.insertNode(8);
        b.insertNode(1);
        b.insertNode(20);
        b.insertNode(30);
        //b.mergesort();
        
        //b.display();
        //Node c = new Node();
        //c = c.merge2lists(a, b);
        
        //c.display();
        
    }

    
}
