public void del_m(int n)
    {
        Node t = this;
        for(int i=0;i<n;i++)
        {
            t=t.next;
        }
        Node temp =t.next;
        while(temp.next.next!=null)
        {
            t.value = t.next.value;
            t.next = t.next.next;
            t=temp;
            temp = temp.next;
        }
        t.next=null;
        
        
    }
    
    public void sort()
    {
        Node n = this;
        Node t = n.next;
        int low;
        while(n!=null)
          {   low = n.value;
            while(t!=null)
            {
                if(low>t.value)
                {
                    low = t.value;
                }
            t=t.next;
            }
        n=n.next;
        }
    }
    
     public Node corrupt()
    {
        Node t = this;
        Node d = t.next;
        
        while(t!=null)
        {
            while(d!=null)
            {                
                if(d.value==t.value && d.next==t.next)
                {
                    return t;
                }
                d=d.next;
            }
            
            
            t=t.next;
        }
        
        
        return t;
    }


public class Stack {

    int top1,top2;
    int[] arr1 =new int[10];
    int [] arr2 = new int[10];
    public Stack()
    {
        top1=-1;
        top2 = -1;
    }
    
    public void pushQueue(int num)
    {
        int trans=0;
        if(top1==-1)
        {
            top1++;
            arr1[top1]=num;
        }
        else
        {
            
            while(arr1[top1]>num && top1!=-1)
            {
                trans=1;
                top2++;
                arr2[top2]=arr1[top1];
                top1--;
               
            }
            top1++;
            arr1[top1]=num;
            
            if(trans==1)
            {
                while(top2>-1)
                {
                top1++;
                arr1[top1]=arr2[top2];
                top2--;
                }
                trans=0;
            }
                     
                
        }
        
    }
   
    public void display()
    {        
        while(top1>-1)
        {
            System.out.println(arr1[top1]);
            top1--;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        Stack queue = new Stack();
        queue.pushQueue(50);
        queue.pushQueue(40);
        queue.pushQueue(100);
       queue.display();
        
   
        
        
    }
    
}
public int balance(Node focus)
   {      
       int left=0;
       int right=0;
       
           if(focus.left!=null)
           {
                left= balance(focus.left)+1;
           }
          if(focus.right!=null)
          {
                right = balance(focus.right)-1; 
          }
            
                      
          System.out.println(left+right);
           return left+right;          
       
   }
