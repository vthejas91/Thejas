ppackage Operations.Small;



import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.apache.spark.SparkConf;
import org.apache.spark.SparkContext;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.broadcast.Broadcast;

import scala.Tuple2;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
        
    	String inputFilePath = args[0];
        String outputFilePath = args[1];
    	
        SparkConf conf = new SparkConf().setAppName("ClosestPair");
        JavaSparkContext sc = new JavaSparkContext(new SparkContext());
        
        JavaRDD<String> inputCsv = sc.textFile(inputFilePath);
        

        JavaRDD<String> headerLessInputCsv = inputCsv.filter(
        		new Function<String, Boolean>()
        		{
        			
        			/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					public Boolean call(String s){ 
						s = s.trim();
						if(s.equals("") ||s==null|| s.isEmpty() || s.contains("x"))
						return false;
					else
						return true;
							}
        		}
        		
        		);

         JavaPairRDD<Coordinate,Integer> points = headerLessInputCsv.mapToPair(new PairFunction<String,Coordinate,Integer>()
        		 {

					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					public Tuple2<Coordinate,Integer> call(String s)
							throws Exception {
						// TODO Auto-generated method stub
						String[] y = s.split(",");
						int i = 0;
						i++;
						Coordinate pt = new Coordinate();
						pt.setX(Double.parseDouble(y[0]));
						pt.setY(Double.parseDouble(y[1]));
						
						return new Tuple2<Coordinate,Integer>(pt,i);
					}
        	 
        		 });
         
         JavaPairRDD<Coordinate,Integer> spoints = points.sortByKey();
         JavaRDD<Coordinate> sortval = spoints.keys();
         
        // JavaRDD<Integer,Coordinate> valpart = sortval.mapPartitionsWithIndex(new Function2<Integer,Iterator<Coordinate>,Iterator<Coordinate>>Integer,3)
         JavaRDD<Tuple2<Integer,Coordinate>> valparts = sortval.mapPartitionsWithIndex(new Function2<Integer,Iterator<Coordinate>,Iterator<Tuple2<Integer, Coordinate>>>()
        		 {

					
					private static final long serialVersionUID = 1L;

					public Iterator<Tuple2<Integer, Coordinate>> call(Integer id, Iterator<Coordinate> iter)
							throws Exception {
						// TODO Auto-generated method stub
						List<Tuple2<Integer,Coordinate>> ptlist = new ArrayList<Tuple2<Integer,Coordinate>>();
						while(iter.hasNext())
						{
	    					   Coordinate coord = iter.next();
	    					   ptlist.add(new Tuple2<Integer,Coordinate>(id,coord));	
						}
						
											
						
						
						return ptlist.iterator();
					}
        	 
        		 },false);
         
         JavaRDD<Tuple2<Integer,Coordinate>> candpts = valparts.mapPartitions(new FlatMapFunction<Iterator<Tuple2<Integer,Coordinate>>,Tuple2<Integer,Coordinate>>()
        		 {

					/**
					 * 
					 */
					private static final long serialVersionUID = 1L;

					public Iterable<Tuple2<Integer, Coordinate>> call(Iterator<Tuple2<Integer, Coordinate>> s)
							throws Exception {
						Double dist = 10.0; 
						Double xdiff;
						Double ydiff; 						
						Double distance;
						Coordinate first = null;
						Coordinate second  = null;
						
						int x = 0 ;
						// TODO Auto-generated method stub
						List<Tuple2<Integer,Coordinate>> cdlist = new ArrayList<Tuple2<Integer,Coordinate>>();
						List<Tuple2<Integer,Coordinate>> canlist = new ArrayList<Tuple2<Integer,Coordinate>>();

						while(s.hasNext())
						{
							cdlist.add(s.next());
														
						}
						for(Tuple2<Integer,Coordinate> p : cdlist)
						{
							for(Tuple2<Integer,Coordinate> q : cdlist)
							{
								Coordinate c1 = p._2();
								Coordinate c2 = q._2();
								x = p._1();
								
								xdiff = c1.getX() - c2.getX();
								ydiff = c1.getY() - c2.getY();
								if (xdiff == 0.0 && ydiff == 0.0)
    							{
    								continue;
    							}
    							distance = Math.sqrt((xdiff * xdiff) + (ydiff * ydiff));
    							if (distance < dist)
    							{
    								dist = distance;
    								first = c1;
    								second = c2;
    							}
    						}
    					}
 					   canlist.add(new Tuple2<Integer,Coordinate>(x,first));	
 					  canlist.add(new Tuple2<Integer,Coordinate>(x,second));
 					  
 					  
 					  return  canlist;
											
						
					}
        	 
        		 });
        		
         
        
         
         
         candpts.saveAsTextFile(outputFilePath);					
        		 
        		         
         
         
       //  closePair.saveAsTextFile(outputFilePath);
         
         
        		     	
    }
}
